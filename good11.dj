class C extends Object{
  nat n;
  C m;
}
main{
  nat n;
  nat b;
  C c;
  c = new C();
  c.m = c;
  printNat(5+2*6);  //prints 17
  printNat(5+(2*6)); //prints 17 and has same AST as previous expression
  printNat((5+2)*6); //prints 42
  assert c.n = 0 > 3 == 4 || ! 1 + 2 || b = 3 * c.n > !1 == 2; //Check AST!
//AST for previous line should be:
//2:    ASSERT_EXPR   (ends on line 14)
//3:      DOT_ASSIGN_EXPR   (ends on line 14)
//4:        ID_EXPR   (ends on line 14)
//5:          AST_ID(c)   (ends on line 14)
//4:        AST_ID(n)   (ends on line 14)
//4:        OR_EXPR   (ends on line 14)
//5:          OR_EXPR   (ends on line 14)
//6:            GREATER_THAN_EXPR   (ends on line 14)
//7:              NAT_LITERAL_EXPR(0)   (ends on line 14)
//7:              EQUALITY_EXPR   (ends on line 14)
//8:                NAT_LITERAL_EXPR(3)   (ends on line 14)
//8:                NAT_LITERAL_EXPR(4)   (ends on line 14)
//6:            NOT_EXPR   (ends on line 14)
//7:              PLUS_EXPR   (ends on line 14)
//8:                NAT_LITERAL_EXPR(1)   (ends on line 14)
//8:                NAT_LITERAL_EXPR(2)   (ends on line 14)
//5:          ASSIGN_EXPR   (ends on line 14)
//6:            AST_ID(b)   (ends on line 14)
//6:            GREATER_THAN_EXPR   (ends on line 14)
//7:              TIMES_EXPR   (ends on line 14)
//8:                NAT_LITERAL_EXPR(3)   (ends on line 14)
//8:                DOT_ID_EXPR   (ends on line 14)
//9:                  ID_EXPR   (ends on line 14)
//10:                    AST_ID(c)   (ends on line 14)
//9:                  AST_ID(n)   (ends on line 14)
//7:              EQUALITY_EXPR   (ends on line 14)
//8:                NOT_EXPR   (ends on line 14)
//9:                  NAT_LITERAL_EXPR(1)   (ends on line 14)
//8:                NAT_LITERAL_EXPR(2)   (ends on line 14)

}
